{"version":3,"sources":["store/GroupRepository.ts","store/DestinationRepository.ts","AuthService.ts","util/compare.ts","DestinationList.tsx","Picker.js","UserContext.tsx","SignInDialog.tsx","GroupContext.tsx","GroupSelector.tsx","GroupCreateForm.tsx","App.tsx","registerServiceWorker.js","index.js"],"names":["GroupRepository","_db","this","firebase","firestore","group","collection","add","doc","id","groupId","userId","update","users","FieldValue","arrayUnion","uid","where","get","then","gs","docs","map","data","DestinationRepository","observer","Observable","create","onSnapshot","querySnapshot","destinations","forEach","push","next","subscribe","dest","delete","AuthService","_groupRepo","firebaseAuth","currentUser$","auth","obs","onAuthStateChanged","user","pipe","switchMap","sub","getGroupMembership","groups","err","console","error","startWith","share","signOut","localeCompare","a","b","DestinationList","selector","onCreate","onDelete","destinationItems","slice","sort","d","name","compare","key","onClick","DestinationAdder","onAdd","useState","text","setText","handleSubmit","value","onChange","event","target","onKeyPress","Picker","picked","setPicked","length","Math","random","reduce","winner","UserContext","React","createContext","SignInDialog","authService","useContext","to","pathname","firebaseUiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","PhoneAuthProvider","callbacks","signInSuccessWithAuthResult","uiConfig","GroupContext","GroupSelector","onSelect","selectedGroup","setSelectedGroup","displayName","g","e","find","GroupCreateForm","setName","working","setWorking","setErr","disabled","createGroup","finally","initializeApp","apiKey","process","authDomain","projectId","log","store","ProtectedRoute","component","rest","Component","render","props","state","from","location","Home","setGroup","setDestinations","useEffect","unsubscribe","Provider","createDestination","deleteDestination","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","ReactDOM","setUser","signOutLink","className","exact","path","_","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8e9db919.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { Group, GroupInfo } from \"../interfaces\";\n\nexport class GroupRepository {\n  private _db: firebase.firestore.Firestore;\n\n  constructor() {\n    this._db = firebase.firestore();\n  }\n\n  async createGroup(group: GroupInfo): Promise<Group> {\n    const doc = await this._db.collection(\"groups\").add(group);\n\n    return { ...group, id: doc.id };\n  }\n\n  addGroupMember(groupId: string, userId: string): Promise<void> {\n    return this._db\n      .collection(\"groups\")\n      .doc(groupId)\n      .update({\n        users: firebase.firestore.FieldValue.arrayUnion(userId)\n      });\n  }\n\n  getGroupMembership(uid: string): Promise<Group[]> {\n    return this._db\n      .collection(\"groups\")\n      .where(\"users\", \"array-contains\", uid)\n      .get()\n      .then(gs => {\n        return gs.docs.map(doc => ({\n          ...(doc.data() as GroupInfo),\n          id: doc.id\n        }));\n      });\n  }\n}\n","import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { Observable, Observer, PartialObserver, Subscription } from \"rxjs\";\nimport { Destination, DestinationInfo } from \"../interfaces\";\n\nexport class DestinationRepository {\n  private _db: firebase.firestore.Firestore;\n\n  constructor() {\n    this._db = firebase.firestore();\n\n  }\n  subscribe(groupId: string, observer: PartialObserver<Destination[]>): Subscription {\n    return Observable.create(\n      (observer: Observer<Destination[]>) => {\n        const unsubscribe = this._db\n          .collection(\"destinations\")\n          .where(\"groupId\", \"==\", groupId)\n          .onSnapshot(querySnapshot => {\n            const destinations = [] as Destination[];\n            querySnapshot.forEach(doc =>\n              destinations.push({\n                id: doc.id,\n                ...doc.data()\n              } as Destination)\n            );\n            observer.next(destinations);\n          });\n        return unsubscribe;\n      }\n    ).subscribe(observer);\n  }\n\n  async createDestination(dest: DestinationInfo) {\n    await this._db.collection(\"destinations\").add(dest);\n  }\n\n  deleteDestination(id: string) {\n    return this._db\n      .collection(\"destinations\")\n      .doc(id)\n      .delete();\n  }\n}\n","import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { Observable, Subscriber } from \"rxjs\";\nimport { share, startWith, switchMap } from \"rxjs/operators\";\n\nimport { User } from \"./interfaces\";\nimport { GroupRepository } from \"./store\";\n\nclass AuthService {\n  private _groupRepo: GroupRepository = new GroupRepository();\n\n  firebaseAuth: firebase.auth.Auth;\n  currentUser$: Observable<User | null>;\n\n  constructor() {\n    this.firebaseAuth = firebase.auth();\n\n    this.currentUser$ = new Observable(\n      (obs: Subscriber<firebase.User | null>) => {\n        this.firebaseAuth.onAuthStateChanged(user => {\n          obs.next(user);\n        });\n      }\n    ).pipe(\n      switchMap((user: firebase.User | null) => {\n        if (user == null) return [null];\n        return new Observable((sub: Subscriber<User>) => {\n          this._groupRepo.getGroupMembership(user.uid).then(\n            groups => sub.next({ ...user, groups }),\n            err => {\n              console.error(\"error fetching groups\", err);\n              sub.next({\n                ...user,\n                groups: []\n              });\n            }\n          );\n        });\n      }),\n      startWith(null),\n      share()\n    );\n  }\n\n  async signOut() {\n    await this.firebaseAuth.signOut();\n  }\n}\n\nexport default AuthService;\n","type Selector<T, TProp> = (item: T) => TProp;\ntype Comparer<T> = (a: T, b: T) => number;\n\nexport function localeCompare(a: string, b: string) {\n  return a.localeCompare(b);\n}\n\nexport function localeCompareWithSelector<T>(selector: Selector<T, string>) {\n  return compare(localeCompare, selector);\n}\n\nfunction compare<T, TProp>(compare: Comparer<TProp>, selector: Selector<T, TProp>): Comparer<T> {\n  return function(a: T, b: T) {\n    return compare(selector(a), selector(b));\n  };\n}\n","import React, { ChangeEvent, KeyboardEvent } from \"react\";\nimport { useState } from \"react\";\nimport { localeCompareWithSelector } from \"./util/compare\";\nimport { Destination, DestinationInfo } from \"./interfaces\";\n\ninterface DestinationListProps {\n  groupId: string;\n  destinations: Destination[];\n  onCreate(d: DestinationInfo): void;\n  onDelete(d: DestinationInfo): void;\n}\n\nexport default function DestinationList({ groupId, destinations, onCreate, onDelete }: DestinationListProps) {\n  const destinationItems = destinations\n    .slice()\n    .sort(localeCompareWithSelector(d => d.name))\n    .map((d: any) => (\n      <li key={d.name}>\n        <button onClick={() => onDelete(d)}>delete</button>\n        {\" \" + d.name}\n      </li>\n    ));\n\n  return (\n    <div>\n      <ul>{destinationItems}</ul>\n      Add new:\n      <br />\n      <DestinationAdder groupId={groupId} onAdd={onCreate} />\n    </div>\n  );\n}\n\ninterface DestinationAdderProps {\n  groupId: string;\n  onAdd(d: DestinationInfo): void;\n}\n\nfunction DestinationAdder({ groupId, onAdd }: DestinationAdderProps) {\n  const [text, setText] = useState(\"\");\n\n  const handleSubmit = () => {\n    onAdd({ groupId, name: text });\n    setText(\"\");\n  };\n\n  const handleValueChanged = (event: ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n\n  const handleInputKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      handleSubmit();\n    }\n  };\n\n  return (\n    <div>\n      <label>Name</label>\n      <input\n        value={text}\n        onChange={handleValueChanged}\n        onKeyPress={handleInputKeyPress}\n      />\n      <button onClick={handleSubmit}>Add</button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"react\";\n\nexport default function Picker({ destinations }) {\n  const [picked, setPicked] = useState();\n  const handlePick = () => {\n    const { dest } = destinations\n      .map(dest => ({ dest, sort: Math.random() }))\n      .reduce((winner, next) => (winner.sort > next.sort ? winner : next));\n    setPicked(dest);\n  };\n\n  if (!destinations || !destinations.length) {\n    return <div />;\n  }\n\n  return (\n    <div>\n      <button onClick={handlePick}>Pick</button>{\" \"}\n      {(picked && picked.name) || \"\\xA0\"}\n    </div>\n  );\n}\n","import React from \"react\"\nimport { User } from \"./interfaces\";\n\nconst UserContext = React.createContext<User | null>(null);\n\nexport default UserContext\n","import React, { useContext } from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { FirebaseAuth } from \"react-firebaseui\";\nimport AuthService from \"./AuthService\";\nimport UserContext from \"./UserContext\";\nimport { Redirect } from \"react-router\";\n\ninterface SignInDialogProps {\n  authService: AuthService;\n}\n\nexport default function SignInDialog({ authService }: SignInDialogProps) {\n  const user = useContext(UserContext);\n  if (user != null) {\n    return <Redirect to={{ pathname: \"/\" }} />;\n  }\n\n  const firebaseUiConfig: firebaseui.auth.Config = {\n    signInFlow: \"popup\",\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.PhoneAuthProvider.PROVIDER_ID,\n    ],\n    callbacks: {\n      signInSuccessWithAuthResult: () => false,\n    },\n  };\n\n  return (\n    <FirebaseAuth\n      uiConfig={firebaseUiConfig}\n      firebaseAuth={authService.firebaseAuth}\n    />\n  );\n}\n","import React from \"react\"\nimport { Group } from \"./interfaces\";\n\nconst GroupContext = React.createContext<Group | null>(null);\n\nexport default GroupContext\n","import React, { useState, ChangeEvent } from \"react\";\nimport { Group, User } from \"./interfaces\";\n\ninterface GroupSelectorProps {\n  user: User;\n  onSelect(g: Group): void;\n}\n\nexport function GroupSelector({ user, onSelect }: GroupSelectorProps) {\n  const [selectedGroup, setSelectedGroup] = useState<Group | null>(\n    user.groups[0]\n  );\n\n  if (!user.groups.length) {\n    return <p>User '{user.displayName}' is not a member of any groups.</p>;\n  }\n\n  const groups = user.groups.map(g => <option value={g.id}>{g.name}</option>);\n  const handleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    const group = user.groups.find(g => g.id === e.target.value);\n    setSelectedGroup(group || null);\n  };\n  const handleSubmit = () => {\n    if (selectedGroup) {\n      onSelect(selectedGroup);\n    }\n  };\n\n  return (\n    <div>\n      <p>no group selected</p>\n      <select\n        value={(selectedGroup && selectedGroup.id) || \"\"}\n        onChange={handleChange}\n      >\n        {groups}\n      </select>\n      <button onClick={handleSubmit}>Switch</button>\n    </div>\n  );\n}\n","import React, { useState, useContext } from \"react\";\nimport { GroupRepository } from \"./store\";\nimport UserContext from \"./UserContext\";\n\nexport function GroupCreateForm({ onCreate }: any) {\n  const [name, setName] = useState(\"\");\n  const [working, setWorking] = useState(false);\n  const user = useContext(UserContext)!;\n  const [err, setErr] = useState(null);\n\n  const handleSubmit = () => {\n    if (name && user) {\n      setWorking(true);\n      new GroupRepository()\n        .createGroup({ name, users: [user.uid] })\n        .then(onCreate, setErr)\n        .finally(() => setWorking(false));\n    }\n  };\n  const disabled = !name.length || working;\n\n  return (\n    <div>\n      <div>\n        <input value={name} onChange={e => setName(e.target.value)} />\n        <button disabled={disabled} onClick={handleSubmit}>\n          Create\n        </button>\n      </div>\n      {err}\n    </div>\n  );\n}\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect, RouteProps } from \"react-router-dom\";\nimport \"./App.css\";\nimport { DestinationRepository } from \"./store\";\nimport AuthService from \"./AuthService\";\nimport DestinationList from \"./DestinationList\";\nimport Picker from \"./Picker\";\nimport SignInDialog from \"./SignInDialog\";\nimport firebase from \"firebase/app\";\nimport { User, Destination, Group } from \"./interfaces\";\nimport GroupContext from \"./GroupContext\";\nimport UserContext from \"./UserContext\";\nimport { GroupSelector } from \"./GroupSelector\";\nimport { GroupCreateForm } from \"./GroupCreateForm\";\n\nfirebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\n});\n\nconsole.log(\"DestinationRepository\", DestinationRepository)\nconst store = new DestinationRepository();\nconst authService = new AuthService();\n\nfunction ProtectedRoute({ component, ...rest }: RouteProps) {\n  const Component = component as React.ReactType;\n\n  const user = useContext<any>(UserContext);\n  return (\n    <Route\n      {...rest}\n      render={props =>\n        user ? (\n          <Component {...props} />\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/sign-in\",\n              state: { from: props.location }\n            }}\n          />\n        )\n      }\n    />\n  );\n}\n\nexport default function App() {\n  const [user, setUser] = useState<User | null>(null);\n  useEffect(() => {\n    const sub = authService.currentUser$.subscribe(setUser);\n    return () => sub.unsubscribe();\n  }, []);\n\n  const handleSignOut = () => {\n    authService.signOut();\n  };\n\n  const signOutLink = user ? (\n    <p>\n      Signed in as: {user.displayName}\n      <button onClick={handleSignOut}>Sign out</button>\n    </p>\n  ) : null;\n\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Lunchtime</h1>\n        </header>\n\n        <div className=\"App-body-container\">\n          <div className=\"App-body\">\n            {signOutLink}\n            <UserContext.Provider value={user}>\n              <Switch>\n                <ProtectedRoute exact path=\"/\" component={Home} />\n                <Route\n                  path=\"/sign-in\"\n                  render={_ => <SignInDialog authService={authService} />}\n                />\n              </Switch>\n            </UserContext.Provider>\n          </div>\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nfunction Home() {\n  const user = useContext(UserContext)!;\n  const [group, setGroup] = useState<Group | null>(null);\n  const [destinations, setDestinations] = useState<Destination[] | null>(null);\n\n  useEffect(() => {\n    if (!group) return;\n    const sub = store.subscribe(group.id, { next: setDestinations });\n    return () => sub.unsubscribe();\n  }, [user, group]);\n\n  if (group == null) {\n    return (\n      <>\n        <GroupSelector user={user} onSelect={setGroup} />\n        <GroupCreateForm onCreate={setGroup} />\n      </>\n    );\n  }\n\n  if (destinations == null) {\n    return <p>Loading data...</p>;\n  }\n\n  const onDestinationCreate = (dest: Destination) => {\n    store.createDestination(dest);\n  };\n\n  const onDestinationDelete = (dest: Destination) => {\n    store.deleteDestination(dest.id);\n  };\n\n  return (\n    <GroupContext.Provider value={group}>\n      <h1>Pick a place</h1>\n      <Picker destinations={destinations} />\n\n      <h1>Edit places</h1>\n      <DestinationList\n        groupId={group.id}\n        destinations={destinations}\n        onCreate={onDestinationCreate}\n        onDelete={onDestinationDelete}\n      />\n    </GroupContext.Provider>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}