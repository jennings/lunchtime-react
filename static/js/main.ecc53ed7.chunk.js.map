{"version":3,"sources":["Store.ts","AuthService.js","util/compare.js","DestinationList.tsx","Picker.js","SignInDialog.tsx","App.tsx","registerServiceWorker.js","index.js"],"names":["Store","_this","this","Object","classCallCheck","_db","destinations$","firebase","firestore","Observable","create","observer","collection","onSnapshot","querySnapshot","destinations","forEach","doc","push","objectSpread","id","data","next","pipe","share","dest","add","delete","AuthService","firebaseAuth","auth","_currentUser$","onAuthStateChanged","user","signOut","localeCompare","a","b","DestinationList","_ref","selector","onCreate","onDelete","destinationItems","slice","sort","d","name","compare","map","react_default","createElement","key","onClick","DestinationAdder","onAdd","_ref2","value","_useState","useState","_useState2","slicedToArray","text","setText","handleSubmit","onChange","event","target","onKeyPress","Picker","picked","setPicked","length","Math","random","reduce","winner","SignInDialog","authService","firebaseUiConfig","signInFlow","signInOptions","GoogleAuthProvider","PROVIDER_ID","PhoneAuthProvider","callbacks","signInSuccessWithAuthResult","result","signIn","react_firebaseui","uiConfig","initializeApp","apiKey","process","authDomain","projectId","store","Home","setUser","_useState3","_useState4","setDestinations","useEffect","sub","currentUser$","subscribe","unsubscribe","switchMap","u","observableFrom","body","Fragment","createDestination","deleteDestination","displayName","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","className","document","getElementById","URL","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.ecc53ed7.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport { Observable, Observer } from \"rxjs\";\nimport { share } from \"rxjs/operators\";\n\nexport interface Destination {\n  id: string;\n}\n\nclass Store {\n  private _db: firebase.firestore.Firestore;\n  readonly destinations$: Observable<Destination[]>;\n\n  constructor() {\n    this._db = firebase.firestore();\n\n    this.destinations$ = Observable.create(\n      (observer: Observer<Destination[]>) => {\n        const unsubscribe = this._db\n          .collection(\"destinations\")\n          .onSnapshot(querySnapshot => {\n            const destinations = [] as Destination[];\n            querySnapshot.forEach(doc =>\n              destinations.push({\n                id: doc.id,\n                ...doc.data()\n              })\n            );\n            observer.next(destinations);\n          });\n        return unsubscribe;\n      }\n    ).pipe(share());\n  }\n\n  async createDestination(dest: Destination) {\n    await this._db.collection(\"destinations\").add(dest);\n  }\n\n  deleteDestination(id: string) {\n    return this._db\n      .collection(\"destinations\")\n      .doc(id)\n      .delete();\n  }\n}\n\nexport default Store;\n","import firebase from 'firebase/app';\nimport 'firebase/auth';\nimport {Observable} from 'rxjs';\nimport {share} from 'rxjs/operators';\n\nclass AuthService {\n  constructor() {\n    this.firebaseAuth = firebase.auth();\n    this._currentUser$ = Observable.create(observer => {\n      this.firebaseAuth.onAuthStateChanged(user => {\n        observer.next(user);\n      });\n    }).pipe(share());\n  }\n\n  get currentUser$() {\n    return this._currentUser$;\n  }\n\n  signIn(user) {}\n\n  async signOut() {\n    await this.firebaseAuth.signOut();\n  }\n}\n\nexport default AuthService;\n","export function localeCompare(a, b) {\n  return a.localeCompare(b);\n}\n\nexport function localeCompareWithSelector(selector) {\n  return compare(localeCompare, selector);\n}\n\nfunction compare(compare, selector) {\n  return function(a, b) {\n    compare(selector(a), selector(b));\n  };\n}\n","import React, { ChangeEvent, KeyboardEvent } from \"react\";\nimport { useState } from \"react\";\nimport { localeCompareWithSelector } from \"./util/compare\";\n\nexport default function DestinationList({ destinations, onCreate, onDelete }: any) {\n  const destinationItems = destinations\n    .slice()\n    .sort(localeCompareWithSelector((d: any) => d.name))\n    .map((d: any) => (\n      <li key={d.name}>\n        <button onClick={() => onDelete(d)}>delete</button>\n        {\" \" + d.name}\n      </li>\n    ));\n\n  return (\n    <div>\n      <ul>{destinationItems}</ul>\n      Add new:\n      <br />\n      <DestinationAdder onAdd={onCreate} />\n    </div>\n  );\n}\n\nfunction DestinationAdder({ value, onAdd }: any) {\n  const [text, setText] = useState(value);\n\n  const handleSubmit = () => {\n    onAdd({ name: text });\n    setText(\"\");\n  };\n\n  const handleValueChanged = (event: ChangeEvent<HTMLInputElement>) => {\n    setText(event.target.value);\n  };\n\n  const handleInputKeyPress = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      handleSubmit();\n    }\n  };\n\n  return (\n    <div>\n      <label>Name</label>\n      <input\n        value={text}\n        onChange={handleValueChanged}\n        onKeyPress={handleInputKeyPress}\n      />\n      <button onClick={handleSubmit}>Add</button>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { useState } from \"react\";\n\nexport default function Picker({ destinations }) {\n  const [picked, setPicked] = useState();\n  const handlePick = () => {\n    const { dest } = destinations\n      .map(dest => ({ dest, sort: Math.random() }))\n      .reduce((winner, next) => (winner.sort > next.sort ? winner : next));\n    setPicked(dest);\n  };\n\n  if (!destinations || !destinations.length) {\n    return <div />;\n  }\n\n  return (\n    <div>\n      <button onClick={handlePick}>Pick</button>{\" \"}\n      {(picked && picked.name) || \"\\xA0\"}\n    </div>\n  );\n}\n","import React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport { FirebaseAuth } from \"react-firebaseui\";\nimport AuthService from \"./AuthService\"\n\ninterface SignInDialogProps {\n  authService: AuthService\n}\n\nexport default function SignInDialog({ authService }: SignInDialogProps) {\n  const firebaseUiConfig: firebaseui.auth.Config = {\n    signInFlow: \"popup\",\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.PhoneAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      signInSuccessWithAuthResult: (result: any) => {\n        authService.signIn(result.user);\n        return false;\n      }\n    }\n  };\n\n  return (\n    <FirebaseAuth\n      uiConfig={firebaseUiConfig}\n      firebaseAuth={authService.firebaseAuth}\n    />\n  );\n}\n","import React, { Component, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Store from \"./Store\";\nimport AuthService from \"./AuthService\";\nimport DestinationList from \"./DestinationList\";\nimport Picker from \"./Picker\";\nimport SignInDialog from \"./SignInDialog\";\nimport firebase from \"firebase/app\";\nimport { from as observableFrom, Subscription } from \"rxjs\";\nimport { switchMap } from \"rxjs/operators\";\nimport { Destination } from \"./Store\";\n\nfirebase.initializeApp({\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID\n});\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1 className=\"App-title\">Lunchtime</h1>\n      </header>\n\n      <div className=\"App-body-container\">\n        <div className=\"App-body\">\n          <Home />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst store = new Store();\nconst authService = new AuthService();\n\nfunction Home() {\n  const [user, setUser] = useState();\n  const [destinations, setDestinations] = useState(null);\n\n  useEffect(() => {\n    const sub = authService.currentUser$.subscribe(setUser);\n    return () => sub.unsubscribe();\n  }, []);\n\n  useEffect(() => {\n    const sub = authService.currentUser$\n      .pipe(switchMap(u => (u ? store.destinations$ : observableFrom([]))))\n      .subscribe(setDestinations);\n    return () => sub.unsubscribe();\n  }, []);\n\n  const onDestinationCreate = (dest: Destination) => {\n    store.createDestination(dest);\n  };\n\n  const onDestinationDelete = (dest: Destination) => {\n    store.deleteDestination(dest.id);\n  };\n\n  const handleSignOut = () => {\n    authService.signOut();\n  };\n\n  if (!user) {\n    return <SignInDialog authService={authService} />;\n  }\n\n  let body;\n  if (destinations == null) {\n    body = <p>Loading data...</p>;\n  } else {\n    body = (\n      <>\n        <h1>Pick a place</h1>\n        <Picker destinations={destinations} />\n\n        <h1>Edit places</h1>\n        <DestinationList\n          destinations={destinations}\n          onCreate={onDestinationCreate}\n          onDelete={onDestinationDelete}\n        />\n      </>\n    );\n  }\n\n  return (\n    <div>\n      <p>\n        Signed in as: {user.displayName}\n        <button onClick={handleSignOut}>Sign out</button>\n      </p>\n      {body}\n    </div>\n  );\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}